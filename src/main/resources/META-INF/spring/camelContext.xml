<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:broker="http://activemq.apache.org/schema/core"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
         http://www.springframework.org/schema/jdbc
         http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.1.xsd
         http://www.springframework.org/schema/data/jpa 
         http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
         http://www.springframework.org/schema/cache 
         http://www.springframework.org/schema/cache/spring-cache.xsd
         http://www.springframework.org/schema/security 
         http://www.springframework.org/schema/security/spring-security-3.1.xsd        
         http://camel.apache.org/schema/spring 
         http://camel.apache.org/schema/spring/camel-spring.xsd
         http://activemq.apache.org/schema/core 
         http://activemq.apache.org/schema/core/activemq-core-5.5.0.xsd
         http://www.springframework.org/schema/jee 
         http://www.springframework.org/schema/jee/spring-jee.xsd
         ">

    <!-- cxf -->
    <import resource="cxfContext.xml"/>
    
    <!-- email(s) -->
    <import resource="emailComponents.xml"/>
    
    <!-- batch jobs -->
    <import resource="jobCommonCompsContext.xml"/>
    <import resource="storeLocationJobContext.xml"/>
    <import resource="vendorMaintCodeJobContext.xml"/>
    <import resource="valvolineInstantStoreLocationJobContext.xml"/>
    <import resource="vendorInvoiceJobContext.xml"/>
    <import resource="directMapMaintCodesJobContext.xml"/>
    <import resource="valvolineInstantInvoiceJobContext.xml"/>
    <import resource="pepBoysInvoiceJobContext.xml"/>
    <import resource="jiffyLubeInvoiceJobContext.xml" />
    <import resource="bridgestoneFirestoneInvoiceJobContext.xml" />
    <import resource="searsInvoiceJobContext.xml" />

		 <!-- let Spring do its IoC stuff in this package -->
		 <context:component-scan base-package="com.mikealbert" />
		 
		 <camel:camelContext id="camel-server">
		   <camel:package>com.mikealbert.processing.routes</camel:package>
		   <!-- enable JMX connector so we can connect to the server and browse mbeans -->
		   <!-- Camel will log at INFO level the service URI to use for connecting with jconsole -->
		   <camel:jmxAgent id="agent" registryPort="{{jmx.port}}" createConnector="true"/>
		 </camel:camelContext>
		 
		 <!-- AspectJ annotation -->
		<aop:aspectj-autoproxy />  
		
		<bean id="bridgePropertyPlaceholder"
			class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
				<property name="locations">
					<list>
						<value>file:///${maintenance-interfaces_config}/application.properties</value>
					</list>
				</property>
		</bean>



  <!-- lets configure the ActiveMQ JMS broker -->
  	<broker:broker id="broker" brokerName="${app.name}-broker" useJmx="true" persistent="false">
  	  	<broker:managementContext>
       		<broker:managementContext connectorPort="${jmx.port}" createConnector="false"/>
    	</broker:managementContext>
		<broker:systemUsage>
	  		<broker:systemUsage>
	  		  	<broker:memoryUsage>
	  				<broker:memoryUsage limit="64 mb"/>
	  			</broker:memoryUsage>
	  		  	<broker:storeUsage>
	  				<broker:storeUsage limit="2 gb"/>
	  			</broker:storeUsage>
	  			<broker:tempUsage>
	  				<broker:tempUsage limit="1 gb"/>
	  			</broker:tempUsage>
	  		</broker:systemUsage>
	  	</broker:systemUsage>
	
        <broker:transportConnectors>
            <broker:transportConnector uri="tcp://0.0.0.0:${jms.port}" />
        </broker:transportConnectors>
    </broker:broker>

	<broker:connectionFactory id="jmsConnectionFactory" brokerURL="vm://localhost:${jms.port}" />

	<bean id="jmsProducerConnectionFactory"
	    class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop" depends-on="broker">
	    <property name="connectionFactory" ref="jmsConnectionFactory"/>
	</bean>

  <!-- lets configure the Camel ActiveMQ to use the embedded ActiveMQ broker declared above -->
  <bean id="jms" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="brokerURL" value="vm://localhost:${jms.port}"/>
  </bean>
  
  <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
	<property name="transactionManager" ref="transactionManager"/>
	<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
  </bean>
  
  <bean id="PROPAGATION_REQUIRES_NEW" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
	<property name="transactionManager" ref="transactionManager"/>
	<property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW"/>
  </bean>

	<jpa:repositories base-package="com.mikealbert.data.dao" />
		
    <!-- This will ensure that hibernate or jpa exceptions are automatically translated into
         Spring's generic DataAccessException hierarchy for those classes annotated with Repository
         For example see UserDaoJpa-->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
	</bean>
	
	<bean id="entityManagerFactory"  
	      class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
         <property name="persistenceUnitName" value="CorePU"/>  
         <property name="dataSource" ref="dataSource"/>   
         <property name="jpaVendorAdapter">  
             <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
                 <property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect"/>  
                 <property name="showSql" value="false" />  
                 <property name="generateDdl" value="false" />  
             </bean>  
         </property>  
         <property name="packagesToScan">
             <list>
                 <value>com.mikealbert.data.entity</value>
             </list>
         </property>           
    </bean>  
    
    <!-- bean post-processor for JPA annotations -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
 
    <!-- Transaction Config -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>

    <!-- use declarative transaction management  -->
    <tx:annotation-driven  transaction-manager="transactionManager"/>
    
   	<!-- cache configuration -->
	<cache:annotation-driven/>
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
	  <property name="caches">
	    <set>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="titleCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="driverManualStatusCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="addressTypeCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="uomCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="driverAllocCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="odometerReadingCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="phoneNumberTypes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="relationshipTypes"/>	
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="maintenaceRequestTypes"/>	
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="maintenanceRequestStatuses"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="maintenanceCategories"/>	  	      
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="maintenanceCodes"/>	
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="maintenanceRechargeCodes"/>
   	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="maintenanceRepairReasons"/>	      
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="costAvoidanceReasons"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="serviceProviderMaintenanceCodes"/>	
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="documentTransactionTypes"/>	            	            		      	      
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="resourceRoleMap"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="modelTypes"/>	
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="financeParameterCategories"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="maintCodeFinParamMapping"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="serviceProviders"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="optionAccessoryCategory"/>		      	      	      	      	            		      	      	       	      
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="clientSystemsWithPOCsExceptSystemAll"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="repairTypeWorkshopCapabilityCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="vehicleTypeWorkshopCapabilityCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="carModelTypeMakes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="serviceProviderMaintnenaceGroups"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="vlInternalRepairTypeWorkshopCapabilityCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="vlInternalVehicleTypeWorkshopCapabilityCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="vlExternalRepairTypeWorkshopCapabilityCodes"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="vlInternalServiceProviderMaintnenaceGroups"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="vlExternalServiceProviderMaintnenaceGroups"/>
	      <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="supplierVLMaintenanceSupplierCategoryCodes"/>
	    </set>
	  </property>
	</bean>
    
    <!-- Quartz Job Scheduler -->	
    <bean id="maSchedulerJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
	    <property name="targetObject" ref="lookupCacheService" />
	    <property name="targetMethod" value="refreshCache" />
    </bean>   
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="maSchedulerJob"/>
	    <!-- run every morning at 12 AM -->
        <property name="cronExpression" value="0 0 6 * * ?"/>
    </bean>	
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="applicationContextSchedulerContextKey"><value>applicationContext</value></property>
        <property name="quartzProperties">
            <props>
			    <prop key="org.quartz.plugin.triggHistory.class">org.quartz.plugins.history.LoggingTriggerHistoryPlugin</prop>
			    <prop key="org.quartz.plugin.triggHistory.triggerFiredMessage">Trigger {1}.{0} fired job {6}.{5} at: {4, date, HH:mm:ss dd/MM/yyyy}</prop>
			    <prop key="org.quartz.plugin.triggHistory.triggerCompleteMessage">Trigger {1}.{0} completed firing job {6}.{5} at {4, date, HH:mm:ss dd/MM/yyyy} with resulting trigger instruction code: {9}</prop>
			    <prop key="org.quartz.plugin.jobHistory.class">org.quartz.plugins.history.LoggingJobHistoryPlugin</prop>
			    <prop key="org.quartz.plugin.jobHistory.jobSuccessMessage">Job {1}.{0} fired at: {2, date, dd/MM/yyyy HH:mm:ss} result=OK</prop>
			    <prop key="org.quartz.plugin.jobHistory.jobFailedMessage">Job {1}.{0} fired at: {2, date, dd/MM/yyyy HH:mm:ss} result=ERROR</prop>			     			     
            </props>  
        </property>
        <property name="jobDetails">
	        <list>
	            <ref bean="maSchedulerJob" />
	        </list>
	     </property>
	     <property name="triggers">
	         <list>
		         <ref bean="cronTrigger" />
	         </list>
	     </property>                           	     
    </bean> 

    <!-- Resource Bundle -->
	<bean id="messageSource"
                     class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
         <property name="basename" value="classpath:messages"/>
         <property name="defaultEncoding" value="UTF-8"/>
         <property name="cacheSeconds" value ="5"/>
	</bean>	
	
	<bean id="log4jInitialization"
 		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	   <property name="targetClass"
	      value="org.springframework.util.Log4jConfigurer" />
	   <property name="targetMethod" value="initLogging" />
	   <property name="arguments">
	      <list>
	         <value>file:///${maintenance-interfaces_config}/log4j.properties</value>
	      </list>
	   </property>
	</bean>

  	
</beans>